{"version":3,"sources":["components/LaunchItem.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["LaunchItem","_ref","_ref$launch","launch","flight_number","mission_name","launch_date_local","launch_success","react_default","a","createElement","className","classNames","text-success","text-danger","dist_default","format","Link","to","concat","LAUNCHES_QUERY","gql","_templateObject","Launches","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react","react_apollo_browser_umd","query","loading","error","data","console","log","launches","map","Component","LAUCH_QUERY","Launch_templateObject","Launch","props","match","params","parseInt","Fragment","variables","launch_year","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","App","BrowserRouter","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2cb10605.chunk.js","sourcesContent":["import React from 'react'\r\nimport classNames from 'classnames';\r\nimport Moment from 'react-moment';\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function LaunchItem({launch: { flight_number , mission_name, launch_date_local, launch_success}}) {\r\n    return (\r\n    <div className =\"card card-body mb-3\">\r\n    <div className=\"row\">\r\n        <div className = \"col-md-9\">\r\n            <h4>Mission: <span className={classNames({\r\n                'text-success': launch_success,\r\n                'text-danger': !launch_success\r\n            })}>{mission_name}</span></h4>\r\n            <p>Date: <Moment format=\"YYYY-MM-DD HH:mm\">{launch_date_local}</Moment></p>\r\n        </div>\r\n        <div className = \"col-md-3\"><Link to={`/launch/${flight_number}`} className= \"btn btn-secondary\">Launch Details</Link></div>\r\n    </div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { Component,Fragment } from 'react'\r\nimport gql from 'graphql-tag';\r\nimport { Query } from 'react-apollo';\r\nimport LaunchItem from './LaunchItem'\r\n\r\nconst LAUNCHES_QUERY = gql`\r\n    query LaunchesQuery {\r\n        launches {\r\n            flight_number\r\n            mission_name\r\n            launch_date_local\r\n            launch_success\r\n        }\r\n    }\r\n`;\r\n\r\nexport class Launches extends Component {\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n          <h1 className=\"display-4 my-3\">Launches</h1>\r\n          <Query query={LAUNCHES_QUERY}>\r\n          {\r\n            ({loading,error,data}) => {\r\n              if(loading) return <h4>loading...</h4>\r\n              if(error) console.log(error);\r\n\r\n              return <Fragment>\r\n                {\r\n                  data.launches.map(launch => (\r\n                    <LaunchItem key={launch.flight_number} launch={launch}/>\r\n                  ))\r\n                }\r\n              </Fragment>;\r\n            }\r\n          }\r\n          </Query>\r\n      </Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Launches\r\n","import React, { Component } from 'react'\r\nimport gql from 'graphql-tag';\r\nimport {Query} from 'react-apollo';\r\nimport {Link} from 'react-router-dom';\r\nimport classNames from 'classnames';\r\n\r\nconst LAUCH_QUERY = gql`\r\n    query LaunchQuery($flight_number: Int!) {\r\n      launch(flight_number: $flight_number) {\r\n           flight_number \r\n           mission_name\r\n           launch_year\r\n           launch_success\r\n           launch_date_local\r\n           rocket {\r\n               rocket_id\r\n               rocket_name\r\n               rocket_type\r\n           } \r\n        }   \r\n    }\r\n`;\r\n\r\nexport class Launch extends Component {\r\n  render() {\r\n    let  { flight_number } = this.props.match.params;\r\n    flight_number = parseInt(flight_number);\r\n    return (\r\n      <>\r\n       <Query query = {LAUCH_QUERY} variables={{flight_number}}>\r\n            {\r\n                ({loading, error, data}) => {\r\n                    if(loading) return <h4>loading...</h4>\r\n                    if(error) console.log(error);\r\n                    \r\n            return <div>               \r\n                <h1 className=\"display-4 my-3\">\r\n                <span className=\"text-dark\">Mission:</span>{data.launch.mission_name}\r\n                </h1>\r\n                <h4 className=\"mb-3\">Launch Details</h4>\r\n                <ul className=\"list-group\">\r\n                    <li className=\"list-group-item\">Flight Number: {data.launch.flight_number}</li>\r\n                    <li className=\"list-group-item\">launch Year: {data.launch.launch_year}</li>\r\n                    <li className=\"list-group-item\">Launch Successful: <span className={classNames({\r\n                        'text-success' : data.launch.launch_success,\r\n                        'text-danger': !data.launch.launch_success\r\n                    })}>{data.launch.launch_success ? 'Yes' : 'No'}</span></li>\r\n                </ul>\r\n                <h4 className=\"my-3\">Rocket Details</h4>\r\n                <ul className=\"list-group\">\r\n                    <li className=\"list-group-item\">Rocket_Id: {data.launch.rocket.rocket_id}</li>\r\n                    <li className=\"list-group-item\">Rocket_Name: {data.launch.rocket.rocket_name}</li>\r\n                    <li className=\"list-group-item\">Rocket_Type: {data.launch.rocket.rocket_type}</li>\r\n                </ul>\r\n                <hr/>\r\n                <Link to=\"/\" className=\"btn btn-secondary\">Back</Link>\r\n                \r\n            </div>\r\n                }\r\n            }\r\n       </Query>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Launch\r\n","import React, { Component } from 'react';\nimport ApolloClient from 'apollo-boost'; \nimport {ApolloProvider} from 'react-apollo';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport Launches from './components/Launches';\nimport Launch from './components/Launch';\nimport './App.css';\n\nconst client = new ApolloClient({\n  uri: '/graphql'\n});\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n      <Router>\n        <div className=\"container\">\n       <h1>Project</h1>\n       <Route exact path=\"/\" component={Launches} />\n       <Route exact path=\"/launch/:flight_number\" component={Launch} />\n      </div>\n      </Router>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}